[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pdf-enrichment-platform"
version = "0.1.0"
description = "Transform PDF forms into structured APIs with BEM-style field naming"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Organization", email = "dev@yourorg.com"},
]
keywords = ["pdf", "forms", "api", "bem", "mcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Office Suites",
]

dependencies = [
    "mcp>=1.0.0",
    "PyPDFForm>=1.4.0",
    "pydantic>=2.0.0",
    "jinja2>=3.1.0",
    "click>=8.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "httpx>=0.24.0",
    "pillow>=10.0.0",
    "reportlab>=4.0.0",
    "anyio>=3.6.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/pdf-enrichment-platform"
Documentation = "https://github.com/yourorg/pdf-enrichment-platform/docs"
Repository = "https://github.com/yourorg/pdf-enrichment-platform"
Issues = "https://github.com/yourorg/pdf-enrichment-platform/issues"

[project.scripts]
pdf-enrichment = "pdf_enrichment.cli.main:main"
pdf-enrich = "pdf_enrichment.cli.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/pdf_enrichment"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "README.md",
    "LICENSE",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/pdf_enrichment",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]
ignore = [
    "PLR0913",  # too many arguments
    "PLR0912",  # too many branches
    "PLR0915",  # too many statements
    "PLR2004",  # magic value used in comparison
    "SIM108",   # if-else-block-instead-of-if-exp
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101", "PLR"]

[tool.ruff.lint.isort]
known-first-party = ["pdf_enrichment"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
pythonVersion = "3.9"
typeCheckingMode = "strict"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]